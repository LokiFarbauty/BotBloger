Описание алгоритма работы программы.

Старт программы main.py
    После запуска:
    - создаётся асинхронная задача просмотра и реакции на консоль;
    - инициализируются боты (загружаются из базы (inits_bot), запускается асинхронное прослушивание (polling_process))
    - запускаются асинхронные задачи парсинга.
    - запускаются асинхронные публикаторы.

База данных
    Для работы программы необходима база.
    При первом запуске, она её создает автоматически. Параметры для создания беруться из файла models\dm_config.py
    Взаимодействие с базой данных происходит через расширение peewee.

Модели (база данных)
    В папке 'data' лежат peewee модели таблиц базы данных. Они подгружаються при создании базы и создаются в ней автоматически
    За это отвечает модуль models\data_model.py. Но модели не обновляются в базе при их редактировании.
    Обновлять структуру базы нужно вручную, в соответствии с обновленной моделью.

APost
    Унифицированный формат спарсенного поста для организации взаимодействия (единого интерфейса) с пользовательскими парсерами APost.
    Т.е. парсер переводит спарсенные посты в унифицированный формат, а дальше с ним работает анализатор и сохранятор.
    Тем самым не нужно для каждого источника делать собственные анализаторы и сохраняторы, просто парсер должен давать им данные в унифицированном виде APost.

Saver
    В модуле models\saver.py содержится процедура сохранения спарсеных данных. Посты на вход она получает в формате APost.


Боты
    При запуске программы боты (токены и прочее) подгружаются из базы данных.
    Боты, имеющие параметр activate = 1, запускаются на прослушивание автоматически.
    Запуск бота происходит путем создания отдельной асинхронной задачи и присваивание её в качестве polling_process.
    Для каждого бота создаётся отдельная асинхронная задача они работают паралельно.
    У каждого бота может быть свой интерфейс. Какой интерфейс использовать хранится в записи бота в базе.

    Полезные функции для телеграм-ботов (bots_utills.py):
        - проверка на запрещенные слова (check_mat_in_text)
        - разделение текста на фрагменты заданной длинны (split_post_text)
        - получение полного имени пользователя телеграм (get_tg_user_names)
        - удаление запрещенных к отправке в телеграм символов (del_forbiden_tg_char)

Консоль
    Консоль работает как отдельная ассинхронная задача.
    Команды для работы программы можно вводить в консоле. Для просмотра списка поддерживаемых команд нужно ввести "?"
    Команды в консоль подгружаються автоматически из модулей "terminal_commands". Для автоматической подгрузки команд
    из модулей пути к ним нужно прописывать в import в модуле routers.console.terminal и указывать в процедуре async def console
    commands.extend_funcs(*"имя модуля"). После чего все найденые в модуле команды Command буду автоматически добавлены в консоль.
    Модуль с командами можно делать просто по образцу, лезть в код terminal_interface не надо.
    Обычно консольные команды содержаться в модулях с именем terminal_commands

Пустая задача
    В main есть задача task_void() она выполняется, когда программа простаивает. Чтобы все работало она просто должна быть.

Роутеры (внутренняя логика программы routers)
    Логеры (logers.py) - тут содержаться различные логеры. Все логеры нужно добавлять в этот модуль.
    Логика телеграм-ботов (telegram.bots)
        Модуль содержит список текущих ботов BotExt - current_bots. Это глобальная переменная. В нем содержаться боты,
        которые были подгружены из базы при старте программы либо добавлены в процессе её работы.
        В классе BotExt содержаться обработчики полученных сообщений.
        При получении команды start в базе обновляется информация о боте, сведения о пользователе бота заносятся (либо обновляются) в базе данных
        сбрасываются открытые ранее диалоги, и бот загружает стартовый диалог, дальше управление вводом уже отдается ему.
        В целом модуле все работает и лезть сюда без большой необходимости не нужно
    Парсинг (parsing)
        Пользовательские парсеры (parsers)
            В папке parsers содержаться пользовательские движки-парсеров. Они должны наследоваться от интерфейса ParserInterface из модуля interface_parser.
            Тогда они подгрузятся автоматически. Пока я сделал только парсер для ВК. Каждый парсер должен быть в отдельном модуле.
            Парсеры разделенные на несколько модулей поидее тоже должны работать, но надо проверять.
        Анализатор (analyzer.py)
            Здесь содержится анализатор спарсеных постов в котором они оцениваются на соответсвие критериям и отметаются, если не подходят под них.
            Здесь все работает. Без крайней надобности лезть не нужно.
        Диспетчер парсеров (dispatcher.py)
            Здесь содержится глобальная переменная диспетчер парсеров parsers_dispatcher = ParserDispatcher.
            Он отвечает запуск задач парсинга. Также диспетчер в автоматическом режиме подгружает все пользовательские движки парсеров из папки parsers, наследуемые от ParserInterface.
            Подгруженые движки парсеров помещаются в переменную диспетчера parsers. Для запуска парсинга вызывается внутрення функция движка parse.
            Данная функция получает информацию из ресурса и переводит её в список постов APost
            Здесь все работает. Без крайней надобности лезть не нужно. Параметр activate отвечает за автостарт задачи парсинга при запуске программы.
        Базовый интерфейс движка парсера (interface_parser.py)
            В модуле описан базовый интерфейс, который должны наследовать все пользовательские движки парсеров, а также интерфейс обмена данными APost.
            Здесь все работает. Без крайней надобности лезть не нужно.
        Парсинг (parsing.py)
            Здесь описана процедура полного цикла парсинга, включающая получение данных от движка, их анализ и сохранение в базу.
        Настройки диспетчера и парсинга (parsing_config.py)
            Тут можно настроить парсинг.
        Функции текстового анализа (text_analyze_tools.py)
            Используются анализатором. Здесь написаны токенизаторы, лематизаторы и т.д.
    Публикаторы
        Публикаторы запускаются в форме отдельных потоков при старте программы.
        current_publicators_process - глобальная переменная содержащая список всех задач публикаторов.

Отображения (views)
    Telegram
        У каждого бота может быть свой интерфейс. Указание какой интерфейс использовать хранится в таблице для каждого бота (имя интерфейса).
        Для подгрузки интерфейсов ботов используется диспетчер. Он автоматически ищет и загружает все интерфейсы из папки views.telegram, наследуемые
        от BotViewInterface (interface_pattern.py)






